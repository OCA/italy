-
  I configure the main company
-
  !record {model: res.company, id: base.main_company}:
    withholding_payment_term_id: account.account_payment_term
    withholding_account_id: a_witholding
    withholding_journal_id: account.miscellaneous_journal
    authority_partner_id: tax_authority
-
  In order to test account invoice I create a new supplier invoice
-
  I create a Tax Codes
-
  !record {model: account.tax.code, id: tax_case}:
    name: Tax_case
    company_id: base.main_company
    sign: 1
-
  I create a Tax
-
  !record {model: account.tax, id: tax10}:
    name: Tax 10.0
    amount: 10.0
    type: fixed
    sequence: 1
    company_id: base.main_company
    type_tax_use: all
    tax_code_id: tax_case
-
  I create a supplier invoice
-
  !record {model: account.invoice, id: account_invoice_supplier0, view: invoice_supplier_form}:
    account_id: account.a_pay
    check_total: 100.0
    company_id: base.main_company
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: 'Layer service'
        price_unit: 100.0
        quantity: 1.0
        invoice_line_tax_id:
                  - tax10
    journal_id: account.expenses_journal
    partner_id: base.res_partner_12
    reference_type: none
    type: in_invoice
    has_withholding: True
    withholding_amount: 20.0
-
  I check that Initially supplier invoice state is "Draft" and 'Net Pay' is 90
-
  !assert {model: account.invoice, id: account_invoice_supplier0}:
    - state == 'draft'
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier0}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier0}:
    - state == 'open'
    - net_pay == 90.0
-
  I create the voucher of payment with values 90
-
  !python {model: account.voucher}: |
    import netsvc
    import time
    vals = {}
    vals = {
        'account_id': ref('account.cash'),
        'amount': 90.0,
        'company_id': ref('base.main_company'),
        'journal_id': ref('account.bank_journal'),
        'partner_id': ref('base.res_partner_12'),
        'date': time.strftime("%Y-03-10"),
        'type': 'payment',
    }
    invoice = self.pool.get('account.invoice').browse(cr, uid, ref('account_invoice_supplier0'))
    for move_line in invoice.move_id.line_id:
        if move_line.account_id.type == 'payable':
            dr_move_line_id = move_line.id
    vals['line_dr_ids'] = [(0,0,{
        'account_id': ref('account.a_pay'),
        'amount': 90.0,
        'type': 'dr',
        'move_line_id': dr_move_line_id,
        })]
    voucher_id = self.create(cr, uid, vals)
    voucher = self.browse(cr, uid, voucher_id)
    assert (voucher.state=='draft'), "Voucher is not in draft state"
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.voucher', voucher.id, 'proforma_voucher', cr)
    voucher.refresh()
    assert (voucher.state=='posted'), "Voucher is not in posted state: %s" % voucher.state
    assert (len(voucher.withholding_move_ids) == 1), "Withholding entry must be one, not %s" % len(voucher.withholding_move_ids)
    for move_line in voucher.withholding_move_ids[0].line_id:
        if move_line.account_id.id == ref('a_witholding'):
            assert (move_line.credit==20.0), "withholding move line credit must be 20 instead of %s" % move_line.credit
            assert (move_line.date_maturity==time.strftime("%Y-04-30")), "due date must be %s instead of %s" % (time.strftime("%Y-04-30"),move_line.date_maturity)
